<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="SELECTIVE" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="fd3267b2-b4d9-4f03-86e7-0c79657ef842" name="Changes" comment="feat: Implementa busca unificada de usuários e ajustes na UI&#10;&#10;Este commit introduz uma nova funcionalidade que permite aos usuários buscar por outros usuários usando nome, CPF ou e-mail em um único campo de busca.&#10;&#10;As seguintes mudanças foram realizadas para implementar isso:&#10;&#10;- **UserController.java:** Atualizado o método `handleSearchUser` para chamar o novo método `findUsersByNameOrCPFOrEmail` em `UserService`.&#10;- **UserService.java:** Adicionado o método `findUsersByNameOrCPFOrEmail` para lidar com a lógica de busca combinada, delegando ao DAO quando disponível e implementando a busca em memória caso contrário.&#10;- **UserDAO.java:** Declarado o método `findUsersByNameOrCPFOrEmail` na interface.&#10;- **UserDAOImpl.java:** Implementado o método `findUsersByNameOrCPFOrEmail` para consultar o banco de dados com base no nome (usando `LIKE`), CPF (usando `=`) e e-mail (usando `LIKE` com condições `OR`).&#10;- **UserView.fxml:**&#10;    - Removidos os elementos `ImageView` para os ícones de busca e adicionar usuário.&#10;    - Ajustado o layout do `HBox` superior para posicionar o botão &quot;Adicionar Usuário&quot; à direita usando um `Region` com `HBox.hgrow=&quot;ALWAYS&quot;`.&#10;    - Inicialmente tentou-se estilizar os tamanhos dos ícones usando classes CSS, mas, para resolver os problemas de dimensionamento imediatamente, aplicou-se `fitWidth`, `fitHeight` e `preserveRatio` diretamente nas tags `ImageView`.&#10;- **Styles.css:** Adicionadas classes CSS (`search-icon`, `add-icon`) para potencial estilização futura dos ícones (embora a estilização direta no FXML tenha sido usada como solução alternativa imediata).&#10;&#10;Essas mudanças proporcionam uma maneira mais conveniente para os usuários encontrarem registros de usuários específicos e refinam a interface do usuário para melhor usabilidade.">
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/com/managerlibrary/controllers/LoanCardController.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/managerlibrary/controllers/LoanCardController.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/com/managerlibrary/controllers/LoanController.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/managerlibrary/controllers/LoanController.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/com/managerlibrary/controllers/LoanDetailsController.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/managerlibrary/controllers/LoanDetailsController.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/com/managerlibrary/controllers/RootLayoutController.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/managerlibrary/controllers/RootLayoutController.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/com/managerlibrary/controllers/UserController.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/managerlibrary/controllers/UserController.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/com/managerlibrary/daos/implement/BookDAOImpl.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/managerlibrary/daos/implement/BookDAOImpl.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/com/managerlibrary/daos/implement/LoanDAOImpl.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/managerlibrary/daos/implement/LoanDAOImpl.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/com/managerlibrary/daos/interfaces/BookDAO.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/managerlibrary/daos/interfaces/BookDAO.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/com/managerlibrary/entities/Loan.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/managerlibrary/entities/Loan.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/com/managerlibrary/services/BookService.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/managerlibrary/services/BookService.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/resources/Styles.css" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/resources/Styles.css" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/resources/views/AddUserView.fxml" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/resources/views/AddUserView.fxml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/resources/views/UserView.fxml" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/resources/views/UserView.fxml" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="ExternalProjectsData">
    <projectState path="$PROJECT_DIR$">
      <ProjectState />
    </projectState>
  </component>
  <component name="ExternalProjectsManager">
    <system id="GRADLE">
      <state>
        <task path="$PROJECT_DIR$">
          <activation />
        </task>
        <projects_view>
          <tree_state>
            <expand />
            <select />
          </tree_state>
        </projects_view>
      </state>
    </system>
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Interface" />
        <option value="Class" />
      </list>
    </option>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="MarkdownSettingsMigration">
    <option name="stateVersion" value="1" />
  </component>
  <component name="ProjectColorInfo">{
  &quot;associatedIndex&quot;: 4
}</component>
  <component name="ProjectId" id="2v8nPg6kYYNKG0r0MYTp0ZMc6uN" />
  <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent">{
  &quot;keyToString&quot;: {
    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,
    &quot;com.codeium.enabled&quot;: &quot;true&quot;,
    &quot;full.screen.before.presentation.mode&quot;: &quot;true&quot;,
    &quot;git-widget-placeholder&quot;: &quot;main&quot;,
    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,
    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,
    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,
    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,
    &quot;onboarding.tips.debug.path&quot;: &quot;/Users/eziolima/java_apps/library-manager/src/main/java/com/managerlibrary/Main.java&quot;,
    &quot;project.structure.last.edited&quot;: &quot;SDKs&quot;,
    &quot;project.structure.proportion&quot;: &quot;0.15&quot;,
    &quot;project.structure.side.proportion&quot;: &quot;0.15686275&quot;,
    &quot;settings.editor.selected.configurable&quot;: &quot;preferences.pluginManager&quot;,
    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;
  },
  &quot;keyToStringList&quot;: {
    &quot;DatabaseDriversLRU&quot;: [
      &quot;postgresql&quot;
    ]
  }
}</component>
  <component name="RecentsManager">
    <key name="MoveFile.RECENT_KEYS">
      <recent name="$PROJECT_DIR$/src/main/resources/icons" />
      <recent name="$PROJECT_DIR$/src/main/resources/assets" />
      <recent name="$PROJECT_DIR$/src/main/resources/@/assets" />
      <recent name="$PROJECT_DIR$/src/main/java/com/managerlibrary" />
      <recent name="$PROJECT_DIR$/src/main/java/com/managerlibrary/views" />
    </key>
    <key name="ExtractSuperBase.RECENT_KEYS">
      <recent name="com.managerlibrary.daos.implement" />
    </key>
  </component>
  <component name="RunManager" selected="Gradle.library-manager run">
    <configuration name="App" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
      <option name="ALTERNATIVE_JRE_PATH" value="21" />
      <option name="ALTERNATIVE_JRE_PATH_ENABLED" value="true" />
      <option name="MAIN_CLASS_NAME" value="com.managerlibrary.App" />
      <module name="library-manager.main" />
      <option name="VM_PARAMETERS" value="--module-path &quot;/Library/Java/JavaVirtualMachines/openjdk-21.0.2/Contents/Home/jmods&quot; --add-modules javafx.controls,javafx.fxml" />
      <extension name="coverage">
        <pattern>
          <option name="PATTERN" value="com.managerlibrary.*" />
          <option name="ENABLED" value="true" />
        </pattern>
      </extension>
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="ConnectionTest (1)" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
      <option name="MAIN_CLASS_NAME" value="ConnectionTest" />
      <module name="library-manager.main" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="ConnectionTest" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
      <option name="MAIN_CLASS_NAME" value="com.managerlibrary.infra.ConnectionTest" />
      <module name="library-manager.main" />
      <extension name="coverage">
        <pattern>
          <option name="PATTERN" value="com.managerlibrary.infra.*" />
          <option name="ENABLED" value="true" />
        </pattern>
      </extension>
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="Main" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
      <option name="MAIN_CLASS_NAME" value="com.managerlibrary.Main" />
      <module name="library-manager.main" />
      <extension name="coverage">
        <pattern>
          <option name="PATTERN" value="com.managerlibrary.*" />
          <option name="ENABLED" value="true" />
        </pattern>
      </extension>
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="library-manager run" type="GradleRunConfiguration" factoryName="Gradle">
      <ExternalSystemSettings>
        <option name="executionName" />
        <option name="externalProjectPath" value="$PROJECT_DIR$" />
        <option name="externalSystemIdString" value="GRADLE" />
        <option name="scriptParameters" value="" />
        <option name="taskDescriptions">
          <list />
        </option>
        <option name="taskNames">
          <list>
            <option value="run" />
          </list>
        </option>
        <option name="vmOptions" />
      </ExternalSystemSettings>
      <ExternalSystemDebugServerProcess>true</ExternalSystemDebugServerProcess>
      <ExternalSystemReattachDebugProcess>true</ExternalSystemReattachDebugProcess>
      <DebugAllEnabled>false</DebugAllEnabled>
      <RunAsTest>false</RunAsTest>
      <method v="2" />
    </configuration>
    <list>
      <item itemvalue="Application.App" />
      <item itemvalue="Application.ConnectionTest" />
      <item itemvalue="Application.ConnectionTest (1)" />
      <item itemvalue="Application.Main" />
      <item itemvalue="Gradle.library-manager run" />
    </list>
    <recent_temporary>
      <list>
        <item itemvalue="Application.ConnectionTest (1)" />
        <item itemvalue="Application.ConnectionTest" />
        <item itemvalue="Application.Main" />
      </list>
    </recent_temporary>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
  <component name="SvnConfiguration">
    <configuration />
  </component>
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="fd3267b2-b4d9-4f03-86e7-0c79657ef842" name="Changes" comment="" />
      <created>1743535545605</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1743535545605</updated>
      <workItem from="1743535546610" duration="1371000" />
      <workItem from="1743595824490" duration="9429000" />
      <workItem from="1743635719994" duration="5331000" />
      <workItem from="1743705566211" duration="6131000" />
      <workItem from="1743720114095" duration="5344000" />
      <workItem from="1743788449023" duration="3503000" />
      <workItem from="1743802434051" duration="2436000" />
      <workItem from="1743816863613" duration="2687000" />
      <workItem from="1744057234973" duration="408000" />
      <workItem from="1744065290435" duration="5659000" />
      <workItem from="1744139917587" duration="4883000" />
      <workItem from="1744144827332" duration="162000" />
      <workItem from="1744156225862" duration="3391000" />
      <workItem from="1744159633417" duration="523000" />
      <workItem from="1744198124149" duration="9157000" />
      <workItem from="1744208699172" duration="239000" />
      <workItem from="1744208947681" duration="20661000" />
      <workItem from="1744304915055" duration="8322000" />
      <workItem from="1744317029546" duration="212000" />
      <workItem from="1744369772949" duration="3881000" />
      <workItem from="1744373673902" duration="7039000" />
      <workItem from="1744386547119" duration="10665000" />
      <workItem from="1744407333504" duration="6989000" />
      <workItem from="1744654894480" duration="6813000" />
      <workItem from="1744667000894" duration="4037000" />
      <workItem from="1744732327073" duration="12390000" />
      <workItem from="1744804171340" duration="8214000" />
      <workItem from="1744813729130" duration="17963000" />
      <workItem from="1744885961109" duration="149000" />
      <workItem from="1744886220365" duration="11619000" />
      <workItem from="1744899459530" duration="10078000" />
      <workItem from="1744918578685" duration="877000" />
      <workItem from="1744919462193" duration="602000" />
      <workItem from="1745346526206" duration="7084000" />
      <workItem from="1745368258066" duration="936000" />
      <workItem from="1745431650147" duration="6180000" />
      <workItem from="1745502005359" duration="2434000" />
      <workItem from="1745522543263" duration="3640000" />
      <workItem from="1745599096082" duration="8967000" />
    </task>
    <task id="LOCAL-00001" summary="fix: Corrige erro de conexão com o banco de dados na classe DataBaseConnection&#10;&#10;Este commit corrige um erro que impedia a classe DataBaseConnection de estabelecer uma conexão bem-sucedida com o banco de dados.&#10;&#10;As seguintes alterações foram feitas:&#10;&#10;* Corrigido um problema com as configurações de conexão que causava falha na conexão.&#10;* Adicionado tratamento de exceção para lidar com erros de conexão.&#10;&#10;Este commit garante que a classe DataBaseConnection possa se conectar ao banco de dados sem problemas.">
      <option name="closed" value="true" />
      <created>1743636112207</created>
      <option name="number" value="00001" />
      <option name="presentableId" value="LOCAL-00001" />
      <option name="project" value="LOCAL" />
      <updated>1743636112207</updated>
    </task>
    <task id="LOCAL-00002" summary="feat: Criação das entidades POJOs (Book, User, Loan)&#10;&#10;Este commit adiciona as classes POJO para representar as entidades do sistema da biblioteca:&#10;&#10;* Book.java: Representa um livro com atributos como título, autor e ISBN.&#10;* User.java: Representa um usuário com atributos como nome, endereço e telefone.&#10;* Loan.java: Representa um empréstimo de livro com atributos como IDs de livro e usuário, e datas de empréstimo e devolução.&#10;&#10;As classes incluem construtores, getters, setters e o método toString(). Comentários Javadoc em português foram adicionados para documentar as classes e seus métodos.">
      <option name="closed" value="true" />
      <created>1743637861625</created>
      <option name="number" value="00002" />
      <option name="presentableId" value="LOCAL-00002" />
      <option name="project" value="LOCAL" />
      <updated>1743637861625</updated>
    </task>
    <task id="LOCAL-00003" summary="feat: Altera atributo 'isbn' para 'quantity' na entidade Book&#10;&#10;Este commit modifica a entidade Book para armazenar a quantidade de exemplares disponíveis do livro em vez do ISBN.&#10;&#10;* Altera o atributo 'isbn' para 'quantity' do tipo int.&#10;* Atualiza construtores, getters, setters e toString().&#10;* Adiciona comentários Javadoc em português.">
      <option name="closed" value="true" />
      <created>1743638374655</created>
      <option name="number" value="00003" />
      <option name="presentableId" value="LOCAL-00003" />
      <option name="project" value="LOCAL" />
      <updated>1743638374655</updated>
    </task>
    <task id="LOCAL-00004" summary="feat: Adiciona DAOs para Livro, Usuário e Empréstimo&#10;&#10;- Cria interfaces LivroDAO, UsuarioDAO e EmprestimoDAO com métodos CRUD.&#10;- Implementa LivroDAOImpl, UsuarioDAOImpl e EmprestimoDAOImpl usando JDBC para acessar o banco de dados PostgreSQL.&#10;- Adapta UsuarioDAOImpl para corresponder à estrutura da tabela Usuario.&#10;- Adiciona LoanDAO e LoanDAOImpl para a tabela de empréstimos.&#10;- Refatora tratamento de exceções nos DAOs para lançar RuntimeException com mensagem descritiva.&#10;- Adiciona comentários em português para documentar o código.&#10;- Atualiza nomes de tabelas no código para &quot;Books&quot;, &quot;Users&quot; e &quot;Loans&quot;.&#10;- Configura o dialeto SQL do projeto para PostgreSQL no IntelliJ IDEA.">
      <option name="closed" value="true" />
      <created>1743722643578</created>
      <option name="number" value="00004" />
      <option name="presentableId" value="LOCAL-00004" />
      <option name="project" value="LOCAL" />
      <updated>1743722643578</updated>
    </task>
    <task id="LOCAL-00005" summary="feat: Cria classes de serviço para Livro, Usuário e Empréstimo&#10;&#10;- Adiciona classes BookService, UserService e LoanService para implementar a lógica de negócios.&#10;- Cada classe de serviço usa o respectivo DAO para acessar o banco de dados.&#10;- Os métodos das classes de serviço encapsulam a lógica de negócios e fornecem uma interface clara para as camadas superiores da aplicação.&#10;- O tratamento de exceções é feito lançando SQLException, que pode ser tratado em camadas superiores da aplicação.&#10;- Adiciona comentários em português para documentar o código.">
      <option name="closed" value="true" />
      <created>1743725160742</created>
      <option name="number" value="00005" />
      <option name="presentableId" value="LOCAL-00005" />
      <option name="project" value="LOCAL" />
      <updated>1743725160742</updated>
    </task>
    <task id="LOCAL-00006" summary="feat(ui): Implementa interface básica de gerenciamento de usuários&#10;&#10;Implementa a interface inicial de gerenciamento de usuários utilizando JavaFX.&#10;&#10;Este commit introduz o seguinte:&#10;&#10;- Criado `UserView.fxml` para definir o layout de gerenciamento de usuários, incluindo campos para name, address, e phone, juntamente com botões para as operações de add, search, update, e remove.&#10;- Criado `UserController.java` para lidar com as interações do usuário e o binding de dados com a UI. Isso inclui:&#10;    - Anotações `@FXML` para os elementos da UI.&#10;    - Método `initialize()` para configurar a `TableView`.&#10;    - Métodos básicos (`addUser`, `searchUsers`, `updateUsers`, `deleteUsers`) anotados com `@FXML` para lidar com as ações dos botões (atualmente com implementações placeholder).&#10;    - Método `carregarUsuarios()` para carregar os dados dos usuários na `TableView` (atualmente utilizando um `UserService` placeholder).&#10;- Modificada a entidade `Usuario.java` para incluir wrappers de `Property` do JavaFX para `id`, `nome`, `endereco`, e `telefone` para habilitar o binding de dados correto com a `TableView`.&#10;&#10;Isso fornece a UI fundamental e a lógica do controller para gerenciar usuários dentro do sistema de gerenciamento de biblioteca. Commits futuros se concentrarão na implementação da lógica de negócios real no `UserService` e na sua conexão com o controller.">
      <option name="closed" value="true" />
      <created>1744071176721</created>
      <option name="number" value="00006" />
      <option name="presentableId" value="LOCAL-00006" />
      <option name="project" value="LOCAL" />
      <updated>1744071176721</updated>
    </task>
    <task id="LOCAL-00007" summary="feat(emprestimo, livro, usuario): implementa funcionalidades iniciais de gerenciamento de empréstimos, livros e usuários, e estrutura da UI&#10;&#10;Este commit introduz a estrutura inicial e algumas funcionalidades para gerenciar empréstimos, livros e usuários dentro da aplicação da biblioteca. Inclui as seguintes alterações:&#10;&#10;- **Estrutura de Pastas:** Organização inicial dos arquivos em pacotes `entities`, `services`, `controllers`, `daos/interfaces`, `daos/implement` e `resources/views`.&#10;- **Entidade `Loan`:** Adicionados atributos `actualReturnDate`, `status` e `fine`. Implementados construtores, `equals`, `hashCode` e `toString`.&#10;- **Entidade `Book`:** Criação da entidade para representar livros (detalhes específicos das alterações podem estar em commits anteriores).&#10;- **Entidade `User`:** Criação da entidade para representar usuários (detalhes específicos das alterações podem estar em commits anteriores).&#10;- **DAO Interfaces (`BookDAO`, `LoanDAO`, `UserDAO`):** Definição das interfaces para as operações de acesso a dados para livros, empréstimos e usuários. Inclui métodos como `insert`, `find`, `findAll`, `update`, `delete`, e `findAllLoansWithDetails`.&#10;- **DAO Implementations (`BookDAOImpl`, `LoanDAOImpl`, `UserDAOImpl`):** Implementações iniciais das interfaces DAO, provavelmente com lógica para interagir com o banco de dados (a implementação detalhada pode variar).&#10;- **Serviços (`BookService`, `LoanService`, `UserService`):**&#10;    - `LoanService`: Implementados métodos `markAsReturned`, `calculateLateFee`, `getAllLoansWithDetails`, `addLoan`, `getLoanById`, `getAllLoans`, `updateLoan`, `removeLoan`. Adicionado suporte para simulação sem DAO.&#10;    - `BookService`: Implementados métodos `decrementAvailableCopies` e `incrementAvailableCopies`, além de outros métodos básicos de CRUD (a implementação detalhada pode variar).&#10;    - `UserService`: Implementados métodos básicos de CRUD (a implementação detalhada pode variar). Adicionado suporte para simulação sem DAO.&#10;- **Controladores (`BookController`, `LoanController`, `LoanCardController`, `LoanDetailsController`, `RootLayoutController`):**&#10;    - `LoanController`: Lógica para exibir lista de empréstimos, adicionar novos empréstimos, filtrar empréstimos, marcar como devolvido e exibir detalhes.&#10;    - `LoanCardController`: Controla a exibição de cada cartão de empréstimo.&#10;    - `LoanDetailsController`: Controla a exibição dos detalhes completos de um empréstimo.&#10;    - `BookController`: Lógica básica para gerenciar livros (a implementação detalhada pode variar).&#10;    - `RootLayoutController`: Controlador para o layout principal da aplicação.&#10;- **Views (FXML):**&#10;    - `BookView.fxml`: Estrutura para a tela de gerenciamento de livros.&#10;    - `AddBookView.fxml`: UI para adicionar novos livros.&#10;    - `LoanView.fxml`: Estrutura para a tela de gerenciamento de empréstimos.&#10;    - `AddLoanView.fxml`: UI para adicionar novos empréstimos.&#10;    - `LoanCardView.fxml`: Layout para os cartões de empréstimo individuais.&#10;    - `LoanDetailsView.fxml`: Layout para exibir os detalhes completos de um empréstimo.&#10;    - `RootLayout.fxml`: Layout principal da aplicação.&#10;- **Outros:**&#10;    - `App.java`: Ponto de entrada da aplicação JavaFX.&#10;    - `Styles.css`: Arquivo de estilos CSS para a interface.&#10;    - Configurações do Gradle (`build.gradle.kts`, `gradle.properties`, `gradlew`, `gradlew.bat`).&#10;    - Configurações do IntelliJ (`.idea/`).&#10;&#10;**Mudança na Estrutura do Layout:**&#10;&#10;A interface do usuário foi estruturada com um layout principal (`RootLayout.fxml` e `RootLayoutController`) que provavelmente serve como base para as outras telas. O gerenciamento de empréstimos utiliza uma abordagem de &quot;cartões&quot; (`LoanCardView.fxml` e `LoanCardController`) para exibir cada empréstimo na tela principal (`LoanView.fxml`), com uma tela separada (`LoanDetailsView.fxml` e `LoanDetailsController`) para detalhes completos. Telas separadas (`BookView.fxml`, `AddBookView.fxml`) foram criadas para o gerenciamento de livros.&#10;&#10;Este commit estabelece a arquitetura básica e algumas funcionalidades chave para o sistema de gerenciamento da biblioteca. Funcionalidades adicionais e refinamentos serão implementados em commits futuros.">
      <option name="closed" value="true" />
      <created>1744679104738</created>
      <option name="number" value="00007" />
      <option name="presentableId" value="LOCAL-00007" />
      <option name="project" value="LOCAL" />
      <updated>1744679104738</updated>
    </task>
    <task id="LOCAL-00008" summary="feat: Implementa estrutura básica da aplicação JavaFX&#10;&#10;Este commit implementa a estrutura fundamental da aplicação de gerenciamento de biblioteca usando JavaFX. As seguintes funcionalidades foram desenvolvidas:&#10;&#10;- Criação do layout principal (`RootLayout.fxml`) com uma barra lateral para navegação e uma área central para exibir as views.&#10;- Implementação do controlador para o layout principal (`RootLayoutController.java`) para gerenciar a troca de views na área central.&#10;- Criação de arquivos FXML para as views de gerenciamento de livros (`BookView.fxml`), usuários (`UserView.fxml`) e empréstimos (`LoanView.fxml`).&#10;- Criação de arquivos FXML para as telas de adição de livros (`AddBookView.fxml`), usuários (`AddUserView.fxml`) e empréstimos (`AddLoanView.fxml`).&#10;- Criação de arquivos FXML para exibir informações de empréstimos (`LoanCardView.fxml` e `LoanDetailsView.fxml`).&#10;- Configuração da classe principal (`App.java`) para carregar o layout principal e inicializar a aplicação.&#10;- Implementação da navegação básica entre as views através dos botões na barra lateral.&#10;- Adição de um placeholder para a logo na barra lateral do layout principal.&#10;- Correção de erros de sintaxe nos arquivos FXML (`alignment`, `hgrow`).&#10;- Correção de erro de `NullPointerException` ao carregar o layout principal.&#10;- Correção de erro de `IllegalArgumentException` ao tentar criar múltiplas cenas com o mesmo nó raiz.&#10;&#10;A aplicação agora exibe a estrutura básica com a barra lateral navegável e carrega a view de gerenciamento de livros como a inicial. Os próximos passos incluem a implementação da lógica de cada view (CRUD para livros, usuários e empréstimos).">
      <option name="closed" value="true" />
      <created>1744746056348</created>
      <option name="number" value="00008" />
      <option name="presentableId" value="LOCAL-00008" />
      <option name="project" value="LOCAL" />
      <updated>1744746056348</updated>
    </task>
    <task id="LOCAL-00009" summary="feat: Estiliza logo na barra lateral com imagem&#10;&#10;Este commit introduz a substituição do placeholder de texto &quot;LOGO AQUI&quot; por uma imagem na barra lateral da aplicação.&#10;&#10;As seguintes alterações foram realizadas:&#10;&#10;- Adicionado uma pasta `assets` dentro de `resources` para armazenar a imagem do logo (`logo.png`).&#10;- Modificado o `RootLayout.fxml` para utilizar um `&lt;ImageView&gt;` para exibir a imagem do logo, referenciando o caminho `@/assets/logo.png`.&#10;- Removidos os atributos `prefWidth` e `prefHeight` do `&lt;ImageView&gt;` no FXML para controlar o tamanho via CSS.&#10;- Adicionada e ajustada a classe `.logo-image` no `Styles.css` para definir a largura, altura, manter a proporção, alinhar a imagem e adicionar margens para o posicionamento correto na barra lateral.&#10;- Ajustado o `-fx-alignment` da classe `.left` (barra lateral) para `top-left` para alinhar o logo à esquerda.&#10;- Adicionada uma margem inferior (`-fx-margin-bottom`) e superior (`-fx-margin-top`) à classe `.logo-image` para o espaçamento vertical desejado.&#10;- Adicionada uma pequena margem à esquerda (`-fx-margin-left`) à classe `.logo-image`.&#10;- Comentada a classe `.label-logo` no `Styles.css`, pois não é mais utilizada para o logo.&#10;&#10;Essas alterações visam melhorar a identidade visual da aplicação, substituindo um placeholder de texto por um logo gráfico.">
      <option name="closed" value="true" />
      <created>1744816363497</created>
      <option name="number" value="00009" />
      <option name="presentableId" value="LOCAL-00009" />
      <option name="project" value="LOCAL" />
      <updated>1744816363497</updated>
    </task>
    <task id="LOCAL-00010" summary="feat: Style and position app title in sidebar&#10;&#10;This commit updates the &quot;Library Manager&quot; text in the sidebar to be a static title instead of a button.&#10;&#10;The following changes were made:&#10;&#10;- Replaced the `&lt;Button&gt;` for &quot;Library Manager&quot; in `RootLayout.fxml` with a `&lt;Label&gt;`.&#10;- Added the `sidebar-label-title` style class to the `&lt;Label`.&#10;- Created the `.sidebar-label-title` CSS class in `Styles.css` to:&#10;    - Increase font size for prominence.&#10;    - Make the font bold.&#10;    - Center the text horizontally.&#10;    - Add padding for better vertical positioning.&#10;    - Set a distinct font family (&quot;Arial Black&quot;).&#10;- Removed the `fx:id` and `onAction` attributes from the &quot;Library Manager&quot; element in `RootLayout.fxml`.&#10;- (Optional) Suggested removal of related controller code (variable and handler method).&#10;&#10;These changes improve the visual presentation of the application title and remove unnecessary interactivity.">
      <option name="closed" value="true" />
      <created>1744825593653</created>
      <option name="number" value="00010" />
      <option name="presentableId" value="LOCAL-00010" />
      <option name="project" value="LOCAL" />
      <updated>1744825593653</updated>
    </task>
    <task id="LOCAL-00011" summary="feat(ui): implement book management and add book functionality&#10;&#10;Este commit introduz a estrutura básica para o gerenciamento de livros dentro da aplicação Library Manager.&#10;&#10;Principais alterações:&#10;&#10;- Criação do arquivo `BookView.fxml` para exibir a lista de livros e fornecer um botão &quot;Adicionar Livro&quot;.&#10;- Implementação da classe `BookController` para gerenciar interações na tela de gerenciamento de livros, incluindo a exibição da tela de adicionar livro.&#10;- Modificação da classe `App.java` para carregar a `BookView` no centro do `RootLayout` quando a aplicação inicia.&#10;- Adição do arquivo `AddBookView.fxml` como um espaço reservado (sua funcionalidade ainda não está completa).&#10;- Estabelecimento da comunicação entre as classes `App`, `RootLayoutController` e `BookController` para facilitar o carregamento de diferentes telas.&#10;- Remoção de um botão &quot;Adicionar Livro&quot; redundante do cabeçalho fixo e sua realocação para dentro da `BookView`, melhorando o contexto visual.&#10;- Renomeação do rótulo &quot;Gerenciar Livros&quot; na `BookView` para &quot;Livros&quot;.&#10;&#10;Atualmente, a funcionalidade &quot;Adicionar Livro&quot;, acionada pelo botão na `BookView`, apenas carrega o `AddBookView.fxml` na área central. Ainda é necessário implementar a lógica de entrada e salvamento dos dados reais do livro.&#10;&#10;Este commit estabelece a base para o gerenciamento de livros na interface da aplicação.">
      <option name="closed" value="true" />
      <created>1744833661663</created>
      <option name="number" value="00011" />
      <option name="presentableId" value="LOCAL-00011" />
      <option name="project" value="LOCAL" />
      <updated>1744833661663</updated>
    </task>
    <task id="LOCAL-00012" summary="fix: Melhorias e correções na funcionalidade de livros&#10;&#10;Este commit engloba diversas alterações e correções implementadas ao longo do dia na funcionalidade de livros. As principais incluem:&#10;&#10;- Reutilização da AddBookView para a edição de livros.&#10;- Ajustes no layout dos botões nos cards de livros para exibição correta do texto.&#10;- Correções de possíveis erros e melhorias gerais na manipulação de livros.">
      <option name="closed" value="true" />
      <created>1744919062869</created>
      <option name="number" value="00012" />
      <option name="presentableId" value="LOCAL-00012" />
      <option name="project" value="LOCAL" />
      <updated>1744919062869</updated>
    </task>
    <task id="LOCAL-00013" summary="feat: Implementa funcionalidade de gerenciamento de usuários com tela de cadastro modal&#10;&#10;Implementa a funcionalidade completa de gerenciamento de usuários, incluindo a listagem, adição (com janela modal), edição e remoção de usuários.&#10;&#10;As seguintes alterações foram realizadas:&#10;- Criação e design da tela de cadastro de usuários (`AddUserView.fxml`).&#10;- Implementação do controller para a tela de cadastro (`AddUserController.java`) com lógica para salvar e cancelar.&#10;- Modificação do `UserController` para exibir a tela de cadastro como uma janela modal (`showAddUserView()`).&#10;- Ajustes no `UserController` para listar, editar e remover usuários (lógica existente).&#10;- Criação e design da tela de edição de usuários (`EditUserView.fxml`) (presumido pela inclusão do `EditUserController.java`).&#10;- Implementação do controller para a tela de edição (`EditUserController.java`) (presumido).&#10;- Possíveis ajustes no `UserService` para suportar as operações de adição, edição e remoção de usuários.&#10;- Pequenas alterações na estrutura principal (`App.java` e `RootLayoutController.java`) para integrar a nova funcionalidade de usuários.&#10;- Ajustes na tela de listagem de usuários (`UserView.fxml`) para acionar as ações de adicionar, editar e remover.&#10;- Alterações no arquivo de workspace do IntelliJ (`workspace.xml`) relacionadas às modificações realizadas.&#10;- (Possíveis outras alterações em `BookController.java`, caso tenha havido alguma interação indireta ou preparação para futuras funcionalidades relacionadas a usuários).">
      <option name="closed" value="true" />
      <created>1745368984705</created>
      <option name="number" value="00013" />
      <option name="presentableId" value="LOCAL-00013" />
      <option name="project" value="LOCAL" />
      <updated>1745368984705</updated>
    </task>
    <task id="LOCAL-00014" summary="fix(user): Adiciona controller da tela de edição de usuários&#10;&#10;Adiciona o arquivo `EditUserController.java` que foi esquecido no commit anterior.">
      <option name="closed" value="true" />
      <created>1745369163899</created>
      <option name="number" value="00014" />
      <option name="presentableId" value="LOCAL-00014" />
      <option name="project" value="LOCAL" />
      <updated>1745369163899</updated>
    </task>
    <task id="LOCAL-00015" summary="feat: Implementa funcionalidade de detalhes e edição de usuários&#10;&#10;Implementa a funcionalidade de visualizar detalhes dos usuários em uma nova janela modal ao clicar no botão &quot;Detalhes&quot; nos cards da listagem.&#10;&#10;Adiciona a capacidade de editar as informações dos usuários ao clicar no botão &quot;Editar&quot;, carregando os dados em uma tela de edição e persistindo as alterações ao salvar.&#10;&#10;**Mudanças:**&#10;&#10;- Adicionado método `handleUserDetails` no `UserController` para carregar a `UserView` como modal de detalhes.&#10;- Adicionado método `displayUserDetails` no `UserController` para preencher os campos de detalhe na `UserView`.&#10;- Declaradas variáveis `@FXML` para os elementos de detalhe no `UserController`.&#10;- Ajustado o método `loadEditUserView` no `UserController` para passar a instância do `UserService` para o `EditUserController`.&#10;- Ajustado o `EditUserController` para receber a instância do `UserService` através do método `setService`.&#10;- Correção de erro de nome de variável (`addressLabel` para `addressDetailLabel`) no `UserController`.">
      <option name="closed" value="true" />
      <created>1745439738394</created>
      <option name="number" value="00015" />
      <option name="presentableId" value="LOCAL-00015" />
      <option name="project" value="LOCAL" />
      <updated>1745439738394</updated>
    </task>
    <task id="LOCAL-00016" summary="feat: Implementa busca unificada de usuários e ajustes na UI&#10;&#10;Este commit introduz uma nova funcionalidade que permite aos usuários buscar por outros usuários usando nome, CPF ou e-mail em um único campo de busca.&#10;&#10;As seguintes mudanças foram realizadas para implementar isso:&#10;&#10;- **UserController.java:** Atualizado o método `handleSearchUser` para chamar o novo método `findUsersByNameOrCPFOrEmail` em `UserService`.&#10;- **UserService.java:** Adicionado o método `findUsersByNameOrCPFOrEmail` para lidar com a lógica de busca combinada, delegando ao DAO quando disponível e implementando a busca em memória caso contrário.&#10;- **UserDAO.java:** Declarado o método `findUsersByNameOrCPFOrEmail` na interface.&#10;- **UserDAOImpl.java:** Implementado o método `findUsersByNameOrCPFOrEmail` para consultar o banco de dados com base no nome (usando `LIKE`), CPF (usando `=`) e e-mail (usando `LIKE` com condições `OR`).&#10;- **UserView.fxml:**&#10;    - Removidos os elementos `ImageView` para os ícones de busca e adicionar usuário.&#10;    - Ajustado o layout do `HBox` superior para posicionar o botão &quot;Adicionar Usuário&quot; à direita usando um `Region` com `HBox.hgrow=&quot;ALWAYS&quot;`.&#10;    - Inicialmente tentou-se estilizar os tamanhos dos ícones usando classes CSS, mas, para resolver os problemas de dimensionamento imediatamente, aplicou-se `fitWidth`, `fitHeight` e `preserveRatio` diretamente nas tags `ImageView`.&#10;- **Styles.css:** Adicionadas classes CSS (`search-icon`, `add-icon`) para potencial estilização futura dos ícones (embora a estilização direta no FXML tenha sido usada como solução alternativa imediata).&#10;&#10;Essas mudanças proporcionam uma maneira mais conveniente para os usuários encontrarem registros de usuários específicos e refinam a interface do usuário para melhor usabilidade.">
      <option name="closed" value="true" />
      <created>1745526370194</created>
      <option name="number" value="00016" />
      <option name="presentableId" value="LOCAL-00016" />
      <option name="project" value="LOCAL" />
      <updated>1745526370194</updated>
    </task>
    <option name="localTasksCounter" value="17" />
    <servers />
  </component>
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="3" />
  </component>
  <component name="VcsManagerConfiguration">
    <MESSAGE value="fix: Corrige erro de conexão com o banco de dados na classe DataBaseConnection&#10;&#10;Este commit corrige um erro que impedia a classe DataBaseConnection de estabelecer uma conexão bem-sucedida com o banco de dados.&#10;&#10;As seguintes alterações foram feitas:&#10;&#10;* Corrigido um problema com as configurações de conexão que causava falha na conexão.&#10;* Adicionado tratamento de exceção para lidar com erros de conexão.&#10;&#10;Este commit garante que a classe DataBaseConnection possa se conectar ao banco de dados sem problemas." />
    <MESSAGE value="feat: Criação das entidades POJOs (Book, User, Loan)&#10;&#10;Este commit adiciona as classes POJO para representar as entidades do sistema da biblioteca:&#10;&#10;* Book.java: Representa um livro com atributos como título, autor e ISBN.&#10;* User.java: Representa um usuário com atributos como nome, endereço e telefone.&#10;* Loan.java: Representa um empréstimo de livro com atributos como IDs de livro e usuário, e datas de empréstimo e devolução.&#10;&#10;As classes incluem construtores, getters, setters e o método toString(). Comentários Javadoc em português foram adicionados para documentar as classes e seus métodos." />
    <MESSAGE value="feat: Altera atributo 'isbn' para 'quantity' na entidade Book&#10;&#10;Este commit modifica a entidade Book para armazenar a quantidade de exemplares disponíveis do livro em vez do ISBN.&#10;&#10;* Altera o atributo 'isbn' para 'quantity' do tipo int.&#10;* Atualiza construtores, getters, setters e toString().&#10;* Adiciona comentários Javadoc em português." />
    <MESSAGE value="feat: Adiciona DAOs para Livro, Usuário e Empréstimo&#10;&#10;- Cria interfaces LivroDAO, UsuarioDAO e EmprestimoDAO com métodos CRUD.&#10;- Implementa LivroDAOImpl, UsuarioDAOImpl e EmprestimoDAOImpl usando JDBC para acessar o banco de dados PostgreSQL.&#10;- Adapta UsuarioDAOImpl para corresponder à estrutura da tabela Usuario.&#10;- Adiciona LoanDAO e LoanDAOImpl para a tabela de empréstimos.&#10;- Refatora tratamento de exceções nos DAOs para lançar RuntimeException com mensagem descritiva.&#10;- Adiciona comentários em português para documentar o código.&#10;- Atualiza nomes de tabelas no código para &quot;Books&quot;, &quot;Users&quot; e &quot;Loans&quot;.&#10;- Configura o dialeto SQL do projeto para PostgreSQL no IntelliJ IDEA." />
    <MESSAGE value="feat: Cria classes de serviço para Livro, Usuário e Empréstimo&#10;&#10;- Adiciona classes BookService, UserService e LoanService para implementar a lógica de negócios.&#10;- Cada classe de serviço usa o respectivo DAO para acessar o banco de dados.&#10;- Os métodos das classes de serviço encapsulam a lógica de negócios e fornecem uma interface clara para as camadas superiores da aplicação.&#10;- O tratamento de exceções é feito lançando SQLException, que pode ser tratado em camadas superiores da aplicação.&#10;- Adiciona comentários em português para documentar o código." />
    <MESSAGE value="feat(ui): Implementa interface básica de gerenciamento de usuários&#10;&#10;Implementa a interface inicial de gerenciamento de usuários utilizando JavaFX.&#10;&#10;Este commit introduz o seguinte:&#10;&#10;- Criado `UserView.fxml` para definir o layout de gerenciamento de usuários, incluindo campos para name, address, e phone, juntamente com botões para as operações de add, search, update, e remove.&#10;- Criado `UserController.java` para lidar com as interações do usuário e o binding de dados com a UI. Isso inclui:&#10;    - Anotações `@FXML` para os elementos da UI.&#10;    - Método `initialize()` para configurar a `TableView`.&#10;    - Métodos básicos (`addUser`, `searchUsers`, `updateUsers`, `deleteUsers`) anotados com `@FXML` para lidar com as ações dos botões (atualmente com implementações placeholder).&#10;    - Método `carregarUsuarios()` para carregar os dados dos usuários na `TableView` (atualmente utilizando um `UserService` placeholder).&#10;- Modificada a entidade `Usuario.java` para incluir wrappers de `Property` do JavaFX para `id`, `nome`, `endereco`, e `telefone` para habilitar o binding de dados correto com a `TableView`.&#10;&#10;Isso fornece a UI fundamental e a lógica do controller para gerenciar usuários dentro do sistema de gerenciamento de biblioteca. Commits futuros se concentrarão na implementação da lógica de negócios real no `UserService` e na sua conexão com o controller." />
    <MESSAGE value="feat(emprestimo, livro, usuario): implementa funcionalidades iniciais de gerenciamento de empréstimos, livros e usuários, e estrutura da UI&#10;&#10;Este commit introduz a estrutura inicial e algumas funcionalidades para gerenciar empréstimos, livros e usuários dentro da aplicação da biblioteca. Inclui as seguintes alterações:&#10;&#10;- **Estrutura de Pastas:** Organização inicial dos arquivos em pacotes `entities`, `services`, `controllers`, `daos/interfaces`, `daos/implement` e `resources/views`.&#10;- **Entidade `Loan`:** Adicionados atributos `actualReturnDate`, `status` e `fine`. Implementados construtores, `equals`, `hashCode` e `toString`.&#10;- **Entidade `Book`:** Criação da entidade para representar livros (detalhes específicos das alterações podem estar em commits anteriores).&#10;- **Entidade `User`:** Criação da entidade para representar usuários (detalhes específicos das alterações podem estar em commits anteriores).&#10;- **DAO Interfaces (`BookDAO`, `LoanDAO`, `UserDAO`):** Definição das interfaces para as operações de acesso a dados para livros, empréstimos e usuários. Inclui métodos como `insert`, `find`, `findAll`, `update`, `delete`, e `findAllLoansWithDetails`.&#10;- **DAO Implementations (`BookDAOImpl`, `LoanDAOImpl`, `UserDAOImpl`):** Implementações iniciais das interfaces DAO, provavelmente com lógica para interagir com o banco de dados (a implementação detalhada pode variar).&#10;- **Serviços (`BookService`, `LoanService`, `UserService`):**&#10;    - `LoanService`: Implementados métodos `markAsReturned`, `calculateLateFee`, `getAllLoansWithDetails`, `addLoan`, `getLoanById`, `getAllLoans`, `updateLoan`, `removeLoan`. Adicionado suporte para simulação sem DAO.&#10;    - `BookService`: Implementados métodos `decrementAvailableCopies` e `incrementAvailableCopies`, além de outros métodos básicos de CRUD (a implementação detalhada pode variar).&#10;    - `UserService`: Implementados métodos básicos de CRUD (a implementação detalhada pode variar). Adicionado suporte para simulação sem DAO.&#10;- **Controladores (`BookController`, `LoanController`, `LoanCardController`, `LoanDetailsController`, `RootLayoutController`):**&#10;    - `LoanController`: Lógica para exibir lista de empréstimos, adicionar novos empréstimos, filtrar empréstimos, marcar como devolvido e exibir detalhes.&#10;    - `LoanCardController`: Controla a exibição de cada cartão de empréstimo.&#10;    - `LoanDetailsController`: Controla a exibição dos detalhes completos de um empréstimo.&#10;    - `BookController`: Lógica básica para gerenciar livros (a implementação detalhada pode variar).&#10;    - `RootLayoutController`: Controlador para o layout principal da aplicação.&#10;- **Views (FXML):**&#10;    - `BookView.fxml`: Estrutura para a tela de gerenciamento de livros.&#10;    - `AddBookView.fxml`: UI para adicionar novos livros.&#10;    - `LoanView.fxml`: Estrutura para a tela de gerenciamento de empréstimos.&#10;    - `AddLoanView.fxml`: UI para adicionar novos empréstimos.&#10;    - `LoanCardView.fxml`: Layout para os cartões de empréstimo individuais.&#10;    - `LoanDetailsView.fxml`: Layout para exibir os detalhes completos de um empréstimo.&#10;    - `RootLayout.fxml`: Layout principal da aplicação.&#10;- **Outros:**&#10;    - `App.java`: Ponto de entrada da aplicação JavaFX.&#10;    - `Styles.css`: Arquivo de estilos CSS para a interface.&#10;    - Configurações do Gradle (`build.gradle.kts`, `gradle.properties`, `gradlew`, `gradlew.bat`).&#10;    - Configurações do IntelliJ (`.idea/`).&#10;&#10;**Mudança na Estrutura do Layout:**&#10;&#10;A interface do usuário foi estruturada com um layout principal (`RootLayout.fxml` e `RootLayoutController`) que provavelmente serve como base para as outras telas. O gerenciamento de empréstimos utiliza uma abordagem de &quot;cartões&quot; (`LoanCardView.fxml` e `LoanCardController`) para exibir cada empréstimo na tela principal (`LoanView.fxml`), com uma tela separada (`LoanDetailsView.fxml` e `LoanDetailsController`) para detalhes completos. Telas separadas (`BookView.fxml`, `AddBookView.fxml`) foram criadas para o gerenciamento de livros.&#10;&#10;Este commit estabelece a arquitetura básica e algumas funcionalidades chave para o sistema de gerenciamento da biblioteca. Funcionalidades adicionais e refinamentos serão implementados em commits futuros." />
    <MESSAGE value="feat: Implementa estrutura básica da aplicação JavaFX&#10;&#10;Este commit implementa a estrutura fundamental da aplicação de gerenciamento de biblioteca usando JavaFX. As seguintes funcionalidades foram desenvolvidas:&#10;&#10;- Criação do layout principal (`RootLayout.fxml`) com uma barra lateral para navegação e uma área central para exibir as views.&#10;- Implementação do controlador para o layout principal (`RootLayoutController.java`) para gerenciar a troca de views na área central.&#10;- Criação de arquivos FXML para as views de gerenciamento de livros (`BookView.fxml`), usuários (`UserView.fxml`) e empréstimos (`LoanView.fxml`).&#10;- Criação de arquivos FXML para as telas de adição de livros (`AddBookView.fxml`), usuários (`AddUserView.fxml`) e empréstimos (`AddLoanView.fxml`).&#10;- Criação de arquivos FXML para exibir informações de empréstimos (`LoanCardView.fxml` e `LoanDetailsView.fxml`).&#10;- Configuração da classe principal (`App.java`) para carregar o layout principal e inicializar a aplicação.&#10;- Implementação da navegação básica entre as views através dos botões na barra lateral.&#10;- Adição de um placeholder para a logo na barra lateral do layout principal.&#10;- Correção de erros de sintaxe nos arquivos FXML (`alignment`, `hgrow`).&#10;- Correção de erro de `NullPointerException` ao carregar o layout principal.&#10;- Correção de erro de `IllegalArgumentException` ao tentar criar múltiplas cenas com o mesmo nó raiz.&#10;&#10;A aplicação agora exibe a estrutura básica com a barra lateral navegável e carrega a view de gerenciamento de livros como a inicial. Os próximos passos incluem a implementação da lógica de cada view (CRUD para livros, usuários e empréstimos)." />
    <MESSAGE value="feat: Estiliza logo na barra lateral com imagem&#10;&#10;Este commit introduz a substituição do placeholder de texto &quot;LOGO AQUI&quot; por uma imagem na barra lateral da aplicação.&#10;&#10;As seguintes alterações foram realizadas:&#10;&#10;- Adicionado uma pasta `assets` dentro de `resources` para armazenar a imagem do logo (`logo.png`).&#10;- Modificado o `RootLayout.fxml` para utilizar um `&lt;ImageView&gt;` para exibir a imagem do logo, referenciando o caminho `@/assets/logo.png`.&#10;- Removidos os atributos `prefWidth` e `prefHeight` do `&lt;ImageView&gt;` no FXML para controlar o tamanho via CSS.&#10;- Adicionada e ajustada a classe `.logo-image` no `Styles.css` para definir a largura, altura, manter a proporção, alinhar a imagem e adicionar margens para o posicionamento correto na barra lateral.&#10;- Ajustado o `-fx-alignment` da classe `.left` (barra lateral) para `top-left` para alinhar o logo à esquerda.&#10;- Adicionada uma margem inferior (`-fx-margin-bottom`) e superior (`-fx-margin-top`) à classe `.logo-image` para o espaçamento vertical desejado.&#10;- Adicionada uma pequena margem à esquerda (`-fx-margin-left`) à classe `.logo-image`.&#10;- Comentada a classe `.label-logo` no `Styles.css`, pois não é mais utilizada para o logo.&#10;&#10;Essas alterações visam melhorar a identidade visual da aplicação, substituindo um placeholder de texto por um logo gráfico." />
    <MESSAGE value="feat: Style and position app title in sidebar&#10;&#10;This commit updates the &quot;Library Manager&quot; text in the sidebar to be a static title instead of a button.&#10;&#10;The following changes were made:&#10;&#10;- Replaced the `&lt;Button&gt;` for &quot;Library Manager&quot; in `RootLayout.fxml` with a `&lt;Label&gt;`.&#10;- Added the `sidebar-label-title` style class to the `&lt;Label`.&#10;- Created the `.sidebar-label-title` CSS class in `Styles.css` to:&#10;    - Increase font size for prominence.&#10;    - Make the font bold.&#10;    - Center the text horizontally.&#10;    - Add padding for better vertical positioning.&#10;    - Set a distinct font family (&quot;Arial Black&quot;).&#10;- Removed the `fx:id` and `onAction` attributes from the &quot;Library Manager&quot; element in `RootLayout.fxml`.&#10;- (Optional) Suggested removal of related controller code (variable and handler method).&#10;&#10;These changes improve the visual presentation of the application title and remove unnecessary interactivity." />
    <MESSAGE value="feat(ui): implement book management and add book functionality&#10;&#10;Este commit introduz a estrutura básica para o gerenciamento de livros dentro da aplicação Library Manager.&#10;&#10;Principais alterações:&#10;&#10;- Criação do arquivo `BookView.fxml` para exibir a lista de livros e fornecer um botão &quot;Adicionar Livro&quot;.&#10;- Implementação da classe `BookController` para gerenciar interações na tela de gerenciamento de livros, incluindo a exibição da tela de adicionar livro.&#10;- Modificação da classe `App.java` para carregar a `BookView` no centro do `RootLayout` quando a aplicação inicia.&#10;- Adição do arquivo `AddBookView.fxml` como um espaço reservado (sua funcionalidade ainda não está completa).&#10;- Estabelecimento da comunicação entre as classes `App`, `RootLayoutController` e `BookController` para facilitar o carregamento de diferentes telas.&#10;- Remoção de um botão &quot;Adicionar Livro&quot; redundante do cabeçalho fixo e sua realocação para dentro da `BookView`, melhorando o contexto visual.&#10;- Renomeação do rótulo &quot;Gerenciar Livros&quot; na `BookView` para &quot;Livros&quot;.&#10;&#10;Atualmente, a funcionalidade &quot;Adicionar Livro&quot;, acionada pelo botão na `BookView`, apenas carrega o `AddBookView.fxml` na área central. Ainda é necessário implementar a lógica de entrada e salvamento dos dados reais do livro.&#10;&#10;Este commit estabelece a base para o gerenciamento de livros na interface da aplicação." />
    <MESSAGE value="fix: Melhorias e correções na funcionalidade de livros&#10;&#10;Este commit engloba diversas alterações e correções implementadas ao longo do dia na funcionalidade de livros. As principais incluem:&#10;&#10;- Reutilização da AddBookView para a edição de livros.&#10;- Ajustes no layout dos botões nos cards de livros para exibição correta do texto.&#10;- Correções de possíveis erros e melhorias gerais na manipulação de livros." />
    <MESSAGE value="feat: Implementa funcionalidade de gerenciamento de usuários com tela de cadastro modal&#10;&#10;Implementa a funcionalidade completa de gerenciamento de usuários, incluindo a listagem, adição (com janela modal), edição e remoção de usuários.&#10;&#10;As seguintes alterações foram realizadas:&#10;- Criação e design da tela de cadastro de usuários (`AddUserView.fxml`).&#10;- Implementação do controller para a tela de cadastro (`AddUserController.java`) com lógica para salvar e cancelar.&#10;- Modificação do `UserController` para exibir a tela de cadastro como uma janela modal (`showAddUserView()`).&#10;- Ajustes no `UserController` para listar, editar e remover usuários (lógica existente).&#10;- Criação e design da tela de edição de usuários (`EditUserView.fxml`) (presumido pela inclusão do `EditUserController.java`).&#10;- Implementação do controller para a tela de edição (`EditUserController.java`) (presumido).&#10;- Possíveis ajustes no `UserService` para suportar as operações de adição, edição e remoção de usuários.&#10;- Pequenas alterações na estrutura principal (`App.java` e `RootLayoutController.java`) para integrar a nova funcionalidade de usuários.&#10;- Ajustes na tela de listagem de usuários (`UserView.fxml`) para acionar as ações de adicionar, editar e remover.&#10;- Alterações no arquivo de workspace do IntelliJ (`workspace.xml`) relacionadas às modificações realizadas.&#10;- (Possíveis outras alterações em `BookController.java`, caso tenha havido alguma interação indireta ou preparação para futuras funcionalidades relacionadas a usuários)." />
    <MESSAGE value="fix(user): Adiciona controller da tela de edição de usuários&#10;&#10;Adiciona o arquivo `EditUserController.java` que foi esquecido no commit anterior." />
    <MESSAGE value="feat: Implementa funcionalidade de detalhes e edição de usuários&#10;&#10;Implementa a funcionalidade de visualizar detalhes dos usuários em uma nova janela modal ao clicar no botão &quot;Detalhes&quot; nos cards da listagem.&#10;&#10;Adiciona a capacidade de editar as informações dos usuários ao clicar no botão &quot;Editar&quot;, carregando os dados em uma tela de edição e persistindo as alterações ao salvar.&#10;&#10;**Mudanças:**&#10;&#10;- Adicionado método `handleUserDetails` no `UserController` para carregar a `UserView` como modal de detalhes.&#10;- Adicionado método `displayUserDetails` no `UserController` para preencher os campos de detalhe na `UserView`.&#10;- Declaradas variáveis `@FXML` para os elementos de detalhe no `UserController`.&#10;- Ajustado o método `loadEditUserView` no `UserController` para passar a instância do `UserService` para o `EditUserController`.&#10;- Ajustado o `EditUserController` para receber a instância do `UserService` através do método `setService`.&#10;- Correção de erro de nome de variável (`addressLabel` para `addressDetailLabel`) no `UserController`." />
    <MESSAGE value="feat: Implementa busca unificada de usuários e ajustes na UI&#10;&#10;Este commit introduz uma nova funcionalidade que permite aos usuários buscar por outros usuários usando nome, CPF ou e-mail em um único campo de busca.&#10;&#10;As seguintes mudanças foram realizadas para implementar isso:&#10;&#10;- **UserController.java:** Atualizado o método `handleSearchUser` para chamar o novo método `findUsersByNameOrCPFOrEmail` em `UserService`.&#10;- **UserService.java:** Adicionado o método `findUsersByNameOrCPFOrEmail` para lidar com a lógica de busca combinada, delegando ao DAO quando disponível e implementando a busca em memória caso contrário.&#10;- **UserDAO.java:** Declarado o método `findUsersByNameOrCPFOrEmail` na interface.&#10;- **UserDAOImpl.java:** Implementado o método `findUsersByNameOrCPFOrEmail` para consultar o banco de dados com base no nome (usando `LIKE`), CPF (usando `=`) e e-mail (usando `LIKE` com condições `OR`).&#10;- **UserView.fxml:**&#10;    - Removidos os elementos `ImageView` para os ícones de busca e adicionar usuário.&#10;    - Ajustado o layout do `HBox` superior para posicionar o botão &quot;Adicionar Usuário&quot; à direita usando um `Region` com `HBox.hgrow=&quot;ALWAYS&quot;`.&#10;    - Inicialmente tentou-se estilizar os tamanhos dos ícones usando classes CSS, mas, para resolver os problemas de dimensionamento imediatamente, aplicou-se `fitWidth`, `fitHeight` e `preserveRatio` diretamente nas tags `ImageView`.&#10;- **Styles.css:** Adicionadas classes CSS (`search-icon`, `add-icon`) para potencial estilização futura dos ícones (embora a estilização direta no FXML tenha sido usada como solução alternativa imediata).&#10;&#10;Essas mudanças proporcionam uma maneira mais conveniente para os usuários encontrarem registros de usuários específicos e refinam a interface do usuário para melhor usabilidade." />
    <option name="LAST_COMMIT_MESSAGE" value="feat: Implementa busca unificada de usuários e ajustes na UI&#10;&#10;Este commit introduz uma nova funcionalidade que permite aos usuários buscar por outros usuários usando nome, CPF ou e-mail em um único campo de busca.&#10;&#10;As seguintes mudanças foram realizadas para implementar isso:&#10;&#10;- **UserController.java:** Atualizado o método `handleSearchUser` para chamar o novo método `findUsersByNameOrCPFOrEmail` em `UserService`.&#10;- **UserService.java:** Adicionado o método `findUsersByNameOrCPFOrEmail` para lidar com a lógica de busca combinada, delegando ao DAO quando disponível e implementando a busca em memória caso contrário.&#10;- **UserDAO.java:** Declarado o método `findUsersByNameOrCPFOrEmail` na interface.&#10;- **UserDAOImpl.java:** Implementado o método `findUsersByNameOrCPFOrEmail` para consultar o banco de dados com base no nome (usando `LIKE`), CPF (usando `=`) e e-mail (usando `LIKE` com condições `OR`).&#10;- **UserView.fxml:**&#10;    - Removidos os elementos `ImageView` para os ícones de busca e adicionar usuário.&#10;    - Ajustado o layout do `HBox` superior para posicionar o botão &quot;Adicionar Usuário&quot; à direita usando um `Region` com `HBox.hgrow=&quot;ALWAYS&quot;`.&#10;    - Inicialmente tentou-se estilizar os tamanhos dos ícones usando classes CSS, mas, para resolver os problemas de dimensionamento imediatamente, aplicou-se `fitWidth`, `fitHeight` e `preserveRatio` diretamente nas tags `ImageView`.&#10;- **Styles.css:** Adicionadas classes CSS (`search-icon`, `add-icon`) para potencial estilização futura dos ícones (embora a estilização direta no FXML tenha sido usada como solução alternativa imediata).&#10;&#10;Essas mudanças proporcionam uma maneira mais conveniente para os usuários encontrarem registros de usuários específicos e refinam a interface do usuário para melhor usabilidade." />
  </component>
  <component name="XSLT-Support.FileAssociations.UIState">
    <expand />
    <select />
  </component>
</project>
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="SELECTIVE" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="fd3267b2-b4d9-4f03-86e7-0c79657ef842" name="Changes" comment="feat(ui): Implementa interface básica de gerenciamento de usuários&#10;&#10;Implementa a interface inicial de gerenciamento de usuários utilizando JavaFX.&#10;&#10;Este commit introduz o seguinte:&#10;&#10;- Criado `UserView.fxml` para definir o layout de gerenciamento de usuários, incluindo campos para name, address, e phone, juntamente com botões para as operações de add, search, update, e remove.&#10;- Criado `UserController.java` para lidar com as interações do usuário e o binding de dados com a UI. Isso inclui:&#10;    - Anotações `@FXML` para os elementos da UI.&#10;    - Método `initialize()` para configurar a `TableView`.&#10;    - Métodos básicos (`addUser`, `searchUsers`, `updateUsers`, `deleteUsers`) anotados com `@FXML` para lidar com as ações dos botões (atualmente com implementações placeholder).&#10;    - Método `carregarUsuarios()` para carregar os dados dos usuários na `TableView` (atualmente utilizando um `UserService` placeholder).&#10;- Modificada a entidade `Usuario.java` para incluir wrappers de `Property` do JavaFX para `id`, `nome`, `endereco`, e `telefone` para habilitar o binding de dados correto com a `TableView`.&#10;&#10;Isso fornece a UI fundamental e a lógica do controller para gerenciar usuários dentro do sistema de gerenciamento de biblioteca. Commits futuros se concentrarão na implementação da lógica de negócios real no `UserService` e na sua conexão com o controller.">
      <change afterPath="$PROJECT_DIR$/.idea/dataSources.local.xml" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/src/main/java/com/managerlibrary/App.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/src/main/java/com/managerlibrary/Main.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/src/main/java/com/managerlibrary/controllers/BookController.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/src/main/java/com/managerlibrary/controllers/LoanCardController.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/src/main/java/com/managerlibrary/controllers/LoanDetailsController.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/src/main/java/com/managerlibrary/controllers/RootLayoutController.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/src/main/resources/Styles.css" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/src/main/resources/views/AddBookView.fxml" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/src/main/resources/views/AddLoanView.fxml" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/src/main/resources/views/AddUserView.fxml" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/src/main/resources/views/BookView.fxml" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/src/main/resources/views/LoanCardView.fxml" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/src/main/resources/views/LoanDetailsView.fxml" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/src/main/resources/views/RootLayout.fxml" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/src/main/resources/views/UserView.fxml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/.gitignore" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/dataSources.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/dataSources.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/gradle.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/gradle.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/sqldialects.xml" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/vcs.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/vcs.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/build.gradle.kts" beforeDir="false" afterPath="$PROJECT_DIR$/build.gradle.kts" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/gradle/wrapper/gradle-wrapper.properties" beforeDir="false" afterPath="$PROJECT_DIR$/gradle/wrapper/gradle-wrapper.properties" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/ConnectionTest.java" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/com/managerlibrary/controllers/LoanController.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/managerlibrary/controllers/LoanController.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/com/managerlibrary/controllers/UserController.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/managerlibrary/controllers/UserController.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/com/managerlibrary/daos/implement/BookDAOImpl.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/managerlibrary/daos/implement/BookDAOImpl.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/com/managerlibrary/daos/implement/LoanDAOImpl.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/managerlibrary/daos/implement/LoanDAOImpl.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/com/managerlibrary/daos/interfaces/BookDAO.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/managerlibrary/daos/interfaces/BookDAO.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/com/managerlibrary/daos/interfaces/LoanDAO.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/managerlibrary/daos/interfaces/LoanDAO.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/com/managerlibrary/entities/Book.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/managerlibrary/entities/Book.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/com/managerlibrary/entities/Loan.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/managerlibrary/entities/Loan.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/com/managerlibrary/entities/User.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/managerlibrary/entities/User.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/com/managerlibrary/infra/DataBaseConnection.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/managerlibrary/infra/DataBaseConnection.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/com/managerlibrary/services/BookService.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/managerlibrary/services/BookService.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/com/managerlibrary/services/LoanService.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/managerlibrary/services/LoanService.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/com/managerlibrary/services/UserService.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/managerlibrary/services/UserService.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/com/managerlibrary/views/LoanView.fxml" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/resources/views/LoanView.fxml" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="ExternalProjectsData">
    <projectState path="$PROJECT_DIR$">
      <ProjectState />
    </projectState>
  </component>
  <component name="ExternalProjectsManager">
    <system id="GRADLE">
      <state>
        <task path="$PROJECT_DIR$">
          <activation />
        </task>
        <projects_view>
          <tree_state>
            <expand />
            <select />
          </tree_state>
        </projects_view>
      </state>
    </system>
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Interface" />
        <option value="Class" />
      </list>
    </option>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="MarkdownSettingsMigration">
    <option name="stateVersion" value="1" />
  </component>
  <component name="ProjectColorInfo">{
  &quot;associatedIndex&quot;: 4
}</component>
  <component name="ProjectId" id="2v8nPg6kYYNKG0r0MYTp0ZMc6uN" />
  <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent">{
  &quot;keyToString&quot;: {
    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,
    &quot;com.codeium.enabled&quot;: &quot;true&quot;,
    &quot;full.screen.before.presentation.mode&quot;: &quot;true&quot;,
    &quot;git-widget-placeholder&quot;: &quot;main&quot;,
    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,
    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,
    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,
    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,
    &quot;onboarding.tips.debug.path&quot;: &quot;/Users/eziolima/java_apps/library-manager/src/main/java/com/managerlibrary/Main.java&quot;,
    &quot;project.structure.last.edited&quot;: &quot;SDKs&quot;,
    &quot;project.structure.proportion&quot;: &quot;0.15&quot;,
    &quot;project.structure.side.proportion&quot;: &quot;0.15686275&quot;,
    &quot;settings.editor.selected.configurable&quot;: &quot;reference.settingsdialog.project.gradle&quot;,
    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;
  },
  &quot;keyToStringList&quot;: {
    &quot;DatabaseDriversLRU&quot;: [
      &quot;postgresql&quot;
    ]
  }
}</component>
  <component name="RecentsManager">
    <key name="MoveFile.RECENT_KEYS">
      <recent name="$PROJECT_DIR$/src/main/java/com/managerlibrary" />
      <recent name="$PROJECT_DIR$/src/main/java/com/managerlibrary/views" />
    </key>
    <key name="ExtractSuperBase.RECENT_KEYS">
      <recent name="com.managerlibrary.daos.implement" />
    </key>
  </component>
  <component name="RunManager" selected="Gradle.library-manager run">
    <configuration name="App" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
      <option name="ALTERNATIVE_JRE_PATH" value="21" />
      <option name="ALTERNATIVE_JRE_PATH_ENABLED" value="true" />
      <option name="MAIN_CLASS_NAME" value="com.managerlibrary.App" />
      <module name="library-manager.main" />
      <option name="VM_PARAMETERS" value="--module-path &quot;/Library/Java/JavaVirtualMachines/openjdk-21.0.2/Contents/Home/jmods&quot; --add-modules javafx.controls,javafx.fxml" />
      <extension name="coverage">
        <pattern>
          <option name="PATTERN" value="com.managerlibrary.*" />
          <option name="ENABLED" value="true" />
        </pattern>
      </extension>
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="ConnectionTest (1)" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
      <option name="MAIN_CLASS_NAME" value="ConnectionTest" />
      <module name="library-manager.main" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="ConnectionTest" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
      <option name="MAIN_CLASS_NAME" value="com.managerlibrary.infra.ConnectionTest" />
      <module name="library-manager.main" />
      <extension name="coverage">
        <pattern>
          <option name="PATTERN" value="com.managerlibrary.infra.*" />
          <option name="ENABLED" value="true" />
        </pattern>
      </extension>
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="Main" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
      <option name="MAIN_CLASS_NAME" value="com.managerlibrary.Main" />
      <module name="library-manager.main" />
      <extension name="coverage">
        <pattern>
          <option name="PATTERN" value="com.managerlibrary.*" />
          <option name="ENABLED" value="true" />
        </pattern>
      </extension>
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="library-manager run" type="GradleRunConfiguration" factoryName="Gradle">
      <ExternalSystemSettings>
        <option name="executionName" />
        <option name="externalProjectPath" value="$PROJECT_DIR$" />
        <option name="externalSystemIdString" value="GRADLE" />
        <option name="scriptParameters" value="" />
        <option name="taskDescriptions">
          <list />
        </option>
        <option name="taskNames">
          <list>
            <option value="run" />
          </list>
        </option>
        <option name="vmOptions" />
      </ExternalSystemSettings>
      <ExternalSystemDebugServerProcess>true</ExternalSystemDebugServerProcess>
      <ExternalSystemReattachDebugProcess>true</ExternalSystemReattachDebugProcess>
      <DebugAllEnabled>false</DebugAllEnabled>
      <RunAsTest>false</RunAsTest>
      <method v="2" />
    </configuration>
    <list>
      <item itemvalue="Application.App" />
      <item itemvalue="Application.ConnectionTest" />
      <item itemvalue="Application.ConnectionTest (1)" />
      <item itemvalue="Application.Main" />
      <item itemvalue="Gradle.library-manager run" />
    </list>
    <recent_temporary>
      <list>
        <item itemvalue="Application.ConnectionTest (1)" />
        <item itemvalue="Application.ConnectionTest" />
        <item itemvalue="Application.Main" />
      </list>
    </recent_temporary>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="fd3267b2-b4d9-4f03-86e7-0c79657ef842" name="Changes" comment="" />
      <created>1743535545605</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1743535545605</updated>
      <workItem from="1743535546610" duration="1371000" />
      <workItem from="1743595824490" duration="9429000" />
      <workItem from="1743635719994" duration="5331000" />
      <workItem from="1743705566211" duration="6131000" />
      <workItem from="1743720114095" duration="5344000" />
      <workItem from="1743788449023" duration="3503000" />
      <workItem from="1743802434051" duration="2436000" />
      <workItem from="1743816863613" duration="2687000" />
      <workItem from="1744057234973" duration="408000" />
      <workItem from="1744065290435" duration="5659000" />
      <workItem from="1744139917587" duration="4883000" />
      <workItem from="1744144827332" duration="162000" />
      <workItem from="1744156225862" duration="3391000" />
      <workItem from="1744159633417" duration="523000" />
      <workItem from="1744198124149" duration="9157000" />
      <workItem from="1744208699172" duration="239000" />
      <workItem from="1744208947681" duration="20661000" />
      <workItem from="1744304915055" duration="8322000" />
      <workItem from="1744317029546" duration="212000" />
      <workItem from="1744369772949" duration="3881000" />
      <workItem from="1744373673902" duration="7039000" />
      <workItem from="1744386547119" duration="10665000" />
      <workItem from="1744407333504" duration="6989000" />
      <workItem from="1744654894480" duration="6813000" />
      <workItem from="1744667000894" duration="3613000" />
    </task>
    <task id="LOCAL-00001" summary="fix: Corrige erro de conexão com o banco de dados na classe DataBaseConnection&#10;&#10;Este commit corrige um erro que impedia a classe DataBaseConnection de estabelecer uma conexão bem-sucedida com o banco de dados.&#10;&#10;As seguintes alterações foram feitas:&#10;&#10;* Corrigido um problema com as configurações de conexão que causava falha na conexão.&#10;* Adicionado tratamento de exceção para lidar com erros de conexão.&#10;&#10;Este commit garante que a classe DataBaseConnection possa se conectar ao banco de dados sem problemas.">
      <option name="closed" value="true" />
      <created>1743636112207</created>
      <option name="number" value="00001" />
      <option name="presentableId" value="LOCAL-00001" />
      <option name="project" value="LOCAL" />
      <updated>1743636112207</updated>
    </task>
    <task id="LOCAL-00002" summary="feat: Criação das entidades POJOs (Book, User, Loan)&#10;&#10;Este commit adiciona as classes POJO para representar as entidades do sistema da biblioteca:&#10;&#10;* Book.java: Representa um livro com atributos como título, autor e ISBN.&#10;* User.java: Representa um usuário com atributos como nome, endereço e telefone.&#10;* Loan.java: Representa um empréstimo de livro com atributos como IDs de livro e usuário, e datas de empréstimo e devolução.&#10;&#10;As classes incluem construtores, getters, setters e o método toString(). Comentários Javadoc em português foram adicionados para documentar as classes e seus métodos.">
      <option name="closed" value="true" />
      <created>1743637861625</created>
      <option name="number" value="00002" />
      <option name="presentableId" value="LOCAL-00002" />
      <option name="project" value="LOCAL" />
      <updated>1743637861625</updated>
    </task>
    <task id="LOCAL-00003" summary="feat: Altera atributo 'isbn' para 'quantity' na entidade Book&#10;&#10;Este commit modifica a entidade Book para armazenar a quantidade de exemplares disponíveis do livro em vez do ISBN.&#10;&#10;* Altera o atributo 'isbn' para 'quantity' do tipo int.&#10;* Atualiza construtores, getters, setters e toString().&#10;* Adiciona comentários Javadoc em português.">
      <option name="closed" value="true" />
      <created>1743638374655</created>
      <option name="number" value="00003" />
      <option name="presentableId" value="LOCAL-00003" />
      <option name="project" value="LOCAL" />
      <updated>1743638374655</updated>
    </task>
    <task id="LOCAL-00004" summary="feat: Adiciona DAOs para Livro, Usuário e Empréstimo&#10;&#10;- Cria interfaces LivroDAO, UsuarioDAO e EmprestimoDAO com métodos CRUD.&#10;- Implementa LivroDAOImpl, UsuarioDAOImpl e EmprestimoDAOImpl usando JDBC para acessar o banco de dados PostgreSQL.&#10;- Adapta UsuarioDAOImpl para corresponder à estrutura da tabela Usuario.&#10;- Adiciona LoanDAO e LoanDAOImpl para a tabela de empréstimos.&#10;- Refatora tratamento de exceções nos DAOs para lançar RuntimeException com mensagem descritiva.&#10;- Adiciona comentários em português para documentar o código.&#10;- Atualiza nomes de tabelas no código para &quot;Books&quot;, &quot;Users&quot; e &quot;Loans&quot;.&#10;- Configura o dialeto SQL do projeto para PostgreSQL no IntelliJ IDEA.">
      <option name="closed" value="true" />
      <created>1743722643578</created>
      <option name="number" value="00004" />
      <option name="presentableId" value="LOCAL-00004" />
      <option name="project" value="LOCAL" />
      <updated>1743722643578</updated>
    </task>
    <task id="LOCAL-00005" summary="feat: Cria classes de serviço para Livro, Usuário e Empréstimo&#10;&#10;- Adiciona classes BookService, UserService e LoanService para implementar a lógica de negócios.&#10;- Cada classe de serviço usa o respectivo DAO para acessar o banco de dados.&#10;- Os métodos das classes de serviço encapsulam a lógica de negócios e fornecem uma interface clara para as camadas superiores da aplicação.&#10;- O tratamento de exceções é feito lançando SQLException, que pode ser tratado em camadas superiores da aplicação.&#10;- Adiciona comentários em português para documentar o código.">
      <option name="closed" value="true" />
      <created>1743725160742</created>
      <option name="number" value="00005" />
      <option name="presentableId" value="LOCAL-00005" />
      <option name="project" value="LOCAL" />
      <updated>1743725160742</updated>
    </task>
    <task id="LOCAL-00006" summary="feat(ui): Implementa interface básica de gerenciamento de usuários&#10;&#10;Implementa a interface inicial de gerenciamento de usuários utilizando JavaFX.&#10;&#10;Este commit introduz o seguinte:&#10;&#10;- Criado `UserView.fxml` para definir o layout de gerenciamento de usuários, incluindo campos para name, address, e phone, juntamente com botões para as operações de add, search, update, e remove.&#10;- Criado `UserController.java` para lidar com as interações do usuário e o binding de dados com a UI. Isso inclui:&#10;    - Anotações `@FXML` para os elementos da UI.&#10;    - Método `initialize()` para configurar a `TableView`.&#10;    - Métodos básicos (`addUser`, `searchUsers`, `updateUsers`, `deleteUsers`) anotados com `@FXML` para lidar com as ações dos botões (atualmente com implementações placeholder).&#10;    - Método `carregarUsuarios()` para carregar os dados dos usuários na `TableView` (atualmente utilizando um `UserService` placeholder).&#10;- Modificada a entidade `Usuario.java` para incluir wrappers de `Property` do JavaFX para `id`, `nome`, `endereco`, e `telefone` para habilitar o binding de dados correto com a `TableView`.&#10;&#10;Isso fornece a UI fundamental e a lógica do controller para gerenciar usuários dentro do sistema de gerenciamento de biblioteca. Commits futuros se concentrarão na implementação da lógica de negócios real no `UserService` e na sua conexão com o controller.">
      <option name="closed" value="true" />
      <created>1744071176721</created>
      <option name="number" value="00006" />
      <option name="presentableId" value="LOCAL-00006" />
      <option name="project" value="LOCAL" />
      <updated>1744071176721</updated>
    </task>
    <option name="localTasksCounter" value="7" />
    <servers />
  </component>
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="3" />
  </component>
  <component name="VcsManagerConfiguration">
    <MESSAGE value="fix: Corrige erro de conexão com o banco de dados na classe DataBaseConnection&#10;&#10;Este commit corrige um erro que impedia a classe DataBaseConnection de estabelecer uma conexão bem-sucedida com o banco de dados.&#10;&#10;As seguintes alterações foram feitas:&#10;&#10;* Corrigido um problema com as configurações de conexão que causava falha na conexão.&#10;* Adicionado tratamento de exceção para lidar com erros de conexão.&#10;&#10;Este commit garante que a classe DataBaseConnection possa se conectar ao banco de dados sem problemas." />
    <MESSAGE value="feat: Criação das entidades POJOs (Book, User, Loan)&#10;&#10;Este commit adiciona as classes POJO para representar as entidades do sistema da biblioteca:&#10;&#10;* Book.java: Representa um livro com atributos como título, autor e ISBN.&#10;* User.java: Representa um usuário com atributos como nome, endereço e telefone.&#10;* Loan.java: Representa um empréstimo de livro com atributos como IDs de livro e usuário, e datas de empréstimo e devolução.&#10;&#10;As classes incluem construtores, getters, setters e o método toString(). Comentários Javadoc em português foram adicionados para documentar as classes e seus métodos." />
    <MESSAGE value="feat: Altera atributo 'isbn' para 'quantity' na entidade Book&#10;&#10;Este commit modifica a entidade Book para armazenar a quantidade de exemplares disponíveis do livro em vez do ISBN.&#10;&#10;* Altera o atributo 'isbn' para 'quantity' do tipo int.&#10;* Atualiza construtores, getters, setters e toString().&#10;* Adiciona comentários Javadoc em português." />
    <MESSAGE value="feat: Adiciona DAOs para Livro, Usuário e Empréstimo&#10;&#10;- Cria interfaces LivroDAO, UsuarioDAO e EmprestimoDAO com métodos CRUD.&#10;- Implementa LivroDAOImpl, UsuarioDAOImpl e EmprestimoDAOImpl usando JDBC para acessar o banco de dados PostgreSQL.&#10;- Adapta UsuarioDAOImpl para corresponder à estrutura da tabela Usuario.&#10;- Adiciona LoanDAO e LoanDAOImpl para a tabela de empréstimos.&#10;- Refatora tratamento de exceções nos DAOs para lançar RuntimeException com mensagem descritiva.&#10;- Adiciona comentários em português para documentar o código.&#10;- Atualiza nomes de tabelas no código para &quot;Books&quot;, &quot;Users&quot; e &quot;Loans&quot;.&#10;- Configura o dialeto SQL do projeto para PostgreSQL no IntelliJ IDEA." />
    <MESSAGE value="feat: Cria classes de serviço para Livro, Usuário e Empréstimo&#10;&#10;- Adiciona classes BookService, UserService e LoanService para implementar a lógica de negócios.&#10;- Cada classe de serviço usa o respectivo DAO para acessar o banco de dados.&#10;- Os métodos das classes de serviço encapsulam a lógica de negócios e fornecem uma interface clara para as camadas superiores da aplicação.&#10;- O tratamento de exceções é feito lançando SQLException, que pode ser tratado em camadas superiores da aplicação.&#10;- Adiciona comentários em português para documentar o código." />
    <MESSAGE value="feat(ui): Implementa interface básica de gerenciamento de usuários&#10;&#10;Implementa a interface inicial de gerenciamento de usuários utilizando JavaFX.&#10;&#10;Este commit introduz o seguinte:&#10;&#10;- Criado `UserView.fxml` para definir o layout de gerenciamento de usuários, incluindo campos para name, address, e phone, juntamente com botões para as operações de add, search, update, e remove.&#10;- Criado `UserController.java` para lidar com as interações do usuário e o binding de dados com a UI. Isso inclui:&#10;    - Anotações `@FXML` para os elementos da UI.&#10;    - Método `initialize()` para configurar a `TableView`.&#10;    - Métodos básicos (`addUser`, `searchUsers`, `updateUsers`, `deleteUsers`) anotados com `@FXML` para lidar com as ações dos botões (atualmente com implementações placeholder).&#10;    - Método `carregarUsuarios()` para carregar os dados dos usuários na `TableView` (atualmente utilizando um `UserService` placeholder).&#10;- Modificada a entidade `Usuario.java` para incluir wrappers de `Property` do JavaFX para `id`, `nome`, `endereco`, e `telefone` para habilitar o binding de dados correto com a `TableView`.&#10;&#10;Isso fornece a UI fundamental e a lógica do controller para gerenciar usuários dentro do sistema de gerenciamento de biblioteca. Commits futuros se concentrarão na implementação da lógica de negócios real no `UserService` e na sua conexão com o controller." />
    <option name="LAST_COMMIT_MESSAGE" value="feat(ui): Implementa interface básica de gerenciamento de usuários&#10;&#10;Implementa a interface inicial de gerenciamento de usuários utilizando JavaFX.&#10;&#10;Este commit introduz o seguinte:&#10;&#10;- Criado `UserView.fxml` para definir o layout de gerenciamento de usuários, incluindo campos para name, address, e phone, juntamente com botões para as operações de add, search, update, e remove.&#10;- Criado `UserController.java` para lidar com as interações do usuário e o binding de dados com a UI. Isso inclui:&#10;    - Anotações `@FXML` para os elementos da UI.&#10;    - Método `initialize()` para configurar a `TableView`.&#10;    - Métodos básicos (`addUser`, `searchUsers`, `updateUsers`, `deleteUsers`) anotados com `@FXML` para lidar com as ações dos botões (atualmente com implementações placeholder).&#10;    - Método `carregarUsuarios()` para carregar os dados dos usuários na `TableView` (atualmente utilizando um `UserService` placeholder).&#10;- Modificada a entidade `Usuario.java` para incluir wrappers de `Property` do JavaFX para `id`, `nome`, `endereco`, e `telefone` para habilitar o binding de dados correto com a `TableView`.&#10;&#10;Isso fornece a UI fundamental e a lógica do controller para gerenciar usuários dentro do sistema de gerenciamento de biblioteca. Commits futuros se concentrarão na implementação da lógica de negócios real no `UserService` e na sua conexão com o controller." />
  </component>
</project>